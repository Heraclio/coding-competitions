#!/usr/bin/python

import os, sys, shutil, threading
sys.setrecursionlimit(100000)

name = os.path.basename(sys.argv[0])
if not name.endswith(".validator"):
  sys.exit(1)
test = name[:-len(".validator")]

def stdin():
  shutil.copyfileobj(
    file(os.path.join(os.path.dirname(sys.argv[0]), "%s.in" % test)),
    sys.stdout, 32768)
  sys.stdout.flush()
  os.close(1)

t = threading.Thread(target=stdin)
t.start()


class Lam(object):
  def __init__(self, arg, body):
    self.arg, self.body = arg, body
  def __str__(self):
    return "(lam %s %s)" % (self.arg, self.body)


def parse_ident(expr):
  res = ""
  for char in expr:
    if char.isalnum() or char == "_":
      res += char
    else:
      break
  if len(res) > 0 and res[0].isdigit():
    return "", expr
  return res, expr[len(res):]


def parse_type(expr):
  expr = expr.lstrip()
  if expr.startswith("("):
    result, remaining = parse_type(expr[1:])
    remaining = remaining.lstrip()
    assert remaining.startswith(")")
    return result, remaining[1:]
  next, remaining = parse_ident(expr)
  if next == "lam":
    arg, remaining = parse_type(remaining)
    body, remaining = parse_type(remaining)
    return Lam(arg, body), remaining
  assert len(next) > 0
  return next, remaining


def parse(expr):
  result, remaining = parse_type(expr)
  assert not remaining.strip()
  return result


def normalize(node, _v=None):
  if _v is None:
    _v = {}
  if node in ("int", "bool"):
    return node
  if isinstance(node, Lam):
    arg = normalize(node.arg, _v=_v)
    body = normalize(node.body, _v=_v)
    return Lam(arg, body)
  if node not in _v:
    _v[node] = "a%d" % len(_v)
  return _v[node]


expected = [str(normalize(parse(line)))
            for line in file(os.path.join(
                os.path.dirname(sys.argv[0]), "%s.out" % test))]
actual = [str(normalize(parse(line)))
          for line in sys.stdin if line.strip()]

if len(expected) != len(actual):
  sys.exit(1)
for i in xrange(len(expected)):
  if expected[i] != actual[i]:
    sys.exit(1)

t.join()
